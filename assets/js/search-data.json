{
  
    
        "post0": {
            "title": "Jupyter Notebook Tutorial",
            "content": "Top 3 uses: . Exploratory analysis, model creation, data science, any kind of coding that require lots of rapid expiramentation and iteration. | Tutorials, guides, and blogs (like this one). Because you have a great mix of text functionality with code, they work really well for tutorials and guides. Rather than having static images, or code snippits that have to get updated each iteration, the code is part of the guide and it really simplifies the process. Notebooks can be exported directly to html and be opened in any browser to give to people. With the easy conversion to html, naturally it&#39;s easy to post them on a web page. | Technical presentations of results. You can have the actual code analysis done, with text explanations. Excess code can be collapsed so that if someone asks really detailed questions you can expand and have every piece of detail. Changes to the analysis are in the presentation so no need to save and put static images in other documents | Cell Types . A cell can be 3 different types. The most useful are code cells and markdown cells. . Code Cells . - Code cells run code The next few cells are examples of code cells - While the most common application is Python, you can set up environments easily to use R, swift, and other languages within jupyter notebooks . Markdown Cells . - This cell is a markdown cell. It is really nice for adding details and text explanations in where a code comment is not enough - They have all the normal markdown functionality, plus more. For example, I can write any technical or mathy stuff using latex, or create html tables in markdown or html. - I can also make markdown tables. . Latex Formulas . $$ begin{bmatrix}w_1&amp;w_2&amp;w_3&amp;w_4&amp;w_5 x_1&amp;x_2&amp;x_3&amp;x_4&amp;x_5 y_1&amp;y_2&amp;y_3&amp;y_4&amp;y_5 z_1&amp;z_2&amp;z_3&amp;z_4&amp;z_5 end{bmatrix}$$ . $ begin{align} frac{dy}{du} &amp;= f&#39;(u) = e^u = e^{ sin(x^2)}, frac{du}{dv} &amp;= g&#39;(v) = cos v = cos(x^2), frac{dv}{dx} &amp;= h&#39;(x) = 2x. end{align}$ . Markdown Table . This is a table for demos . perc | 55% | 22% | 23% | 12% | 53% | . qty | 23 | 19 | 150 | 9 | 92 | . #collapse-hide import numpy as np import matplotlib.pyplot as plt import pandas as pd import seaborn as sns pd.options.display.max_columns = None pd.options.display.max_rows = None %matplotlib inline . . Running Code . Naturally you can run code cells and print to the Jupyter Notebook . for x in range(0,5): print(x*10) . 0 10 20 30 40 . DataFrames . iris = sns.load_dataset(&#39;iris&#39;) iris[iris.petal_length &gt; 6] . sepal_length sepal_width petal_length petal_width species . 105 | 7.6 | 3.0 | 6.6 | 2.1 | virginica | . 107 | 7.3 | 2.9 | 6.3 | 1.8 | virginica | . 109 | 7.2 | 3.6 | 6.1 | 2.5 | virginica | . 117 | 7.7 | 3.8 | 6.7 | 2.2 | virginica | . 118 | 7.7 | 2.6 | 6.9 | 2.3 | virginica | . 122 | 7.7 | 2.8 | 6.7 | 2.0 | virginica | . 130 | 7.4 | 2.8 | 6.1 | 1.9 | virginica | . 131 | 7.9 | 3.8 | 6.4 | 2.0 | virginica | . 135 | 7.7 | 3.0 | 6.1 | 2.3 | virginica | . Plotting . Below we are going to make a few graphs to get the point accross. Naturally, each graph can be accompanied with a markdown cell that gives context and explains the value of that graph. . Line Chart . # evenly sampled time at 200ms intervals t = np.arange(0., 5., 0.2) # red dashes, blue squares and green triangles plt.plot(t, t, &#39;r--&#39;, t, t**2, &#39;bs&#39;, t, t**3, &#39;g^&#39;) plt.show() . Scatter Plot . Sometimes we will want to display a graph, but may not want all the code and details to be immediately visable. In these examples we can create a scatter plot like below, but collapse the code cell. . This is great when you want to show a graph and explain it, but the details of how the graph was created aren&#39;t that important. . #collapse-hide data = {&#39;a&#39;: np.arange(50), &#39;c&#39;: np.random.randint(0, 50, 50), &#39;d&#39;: np.random.randn(50)} data[&#39;b&#39;] = data[&#39;a&#39;] + 10 * np.random.randn(50) data[&#39;d&#39;] = np.abs(data[&#39;d&#39;]) * 100 plt.scatter(&#39;a&#39;, &#39;b&#39;, c=&#39;c&#39;, s=&#39;d&#39;, data=data) plt.xlabel(&#39;entry a&#39;) plt.ylabel(&#39;entry b&#39;) plt.show() . . Categorical Plot . We can create subplots to have multiple plots show up. This can be especially helpful when showing lots of the same information, or showing how 2 different metrics are related or need to be analyzed together . #collapse-hide names = [&#39;group_a&#39;, &#39;group_b&#39;, &#39;group_c&#39;] values = [1, 10, 100] plt.figure(figsize=(9, 3)) plt.subplot(131) plt.bar(names, values) plt.subplot(132) plt.scatter(names, values) plt.subplot(133) plt.plot(names, values) plt.suptitle(&#39;Categorical Plotting&#39;) plt.show() . . Stack Traces . When you run into an error, by default jupyter notebooks give you whatever the error message is, but also the entire stack trace. . There is a debug functionality, but I find that these stack traces and jupyter cells work even better than a debugger. I can break my code into as many cells as I want and run things interactively. Here&#39;s a few examples of stack traces. . Matrix Multiplication Good . Now we are going to show an example of errors where the stack trace isn&#39;t as simple. Suppose we are trying to multiply 2 arrays together (matrix multiplication). . a = np.array([ [1,2,4], [3,4,5], [5,6,7] ]) b = np.array([ [11,12,14], [31,14,15], [23,32,23] ]) a@b . array([[165, 168, 136], [272, 252, 217], [402, 368, 321]]) . Matrix Multiplication Bad . Now if it errors because the columns from matrix a don&#39;t match the rows from matrix b, we will get an error as matrix multiplication is impossible with those matrices. We see the same idea s the above for loop, stack trace with error and arrow pointing at the line that failed . # here&#39;s another a = np.array([ [1,2,4], [3,4,5], [5,6,7] ]) b = np.array([ [11,12,14], [31,14,15] ]) a@b . ValueError Traceback (most recent call last) &lt;ipython-input-8-52272ca444fc&gt; in &lt;module&gt; 9 [31,14,15] 10 ]) &gt; 11 a@b ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)-&gt;(n?,m?) (size 2 is different from 3) . Second Layer of Bad . But what if the line we call isn&#39;t what fails? What if what I run works, but the function underneath fails? . In these example, you see the entire trace. It starts with are arrow at what you ran that errored. It then shows an arrow that your code called that caused the error, so you can track all the way back to the source. Here&#39;s how it shows a two step stack trace, but it can be as long as needed. . def matmul(a,b): c = a@b return c . matmul(a,b) . ValueError Traceback (most recent call last) &lt;ipython-input-10-7853c1c27063&gt; in &lt;module&gt; -&gt; 1 matmul(a,b) &lt;ipython-input-9-1c8b6b954779&gt; in matmul(a, b) 1 def matmul(a,b): -&gt; 2 c = a@b 3 return c ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)-&gt;(n?,m?) (size 2 is different from 3) . Magic Commands . Magic commands are special commands for Juptyer Notebooks. They give you incredible functionality and you will likley find the experience very frustrating without them. A few that I use often are: . ? | put a question mark or 2 after a function or method to get the documentation. ?? gives more detail than ?. I can also use it to wild card search modules for functions. | shift tab | when you are writing something holding shift + tab will open a mini popup with the documentation for that thing. It may be a funciton, method, or module. | %who or %whos or %who_ls | These are all variants that list the objects and variables. I prefer %whos most of the time | %history | This allows you to look at the last pieces of code that you ran | $$ | wrapping latex code in dollar signs in a markdown cell renders latex code in markdown cells | ! | putting ! at the beginning of a line makes it run that in terminal. For example !ls | grep .csv | %time | I can use this to time the execution of things | . np.*array*? . np.array np.array2string np.array_equal np.array_equiv np.array_repr np.array_split np.array_str np.asanyarray np.asarray np.asarray_chkfinite np.ascontiguousarray np.asfarray np.asfortranarray np.broadcast_arrays np.chararray np.compare_chararrays np.get_array_wrap np.ndarray np.numarray np.recarray . np.array_equal?? . Signature: np.array_equal(a1, a2) Source: @array_function_dispatch(_array_equal_dispatcher) def array_equal(a1, a2): &#34;&#34;&#34; True if two arrays have the same shape and elements, False otherwise. Parameters - a1, a2 : array_like Input arrays. Returns - b : bool Returns True if the arrays are equal. See Also -- allclose: Returns True if two arrays are element-wise equal within a tolerance. array_equiv: Returns True if input arrays are shape consistent and all elements equal. Examples -- &gt;&gt;&gt; np.array_equal([1, 2], [1, 2]) True &gt;&gt;&gt; np.array_equal(np.array([1, 2]), np.array([1, 2])) True &gt;&gt;&gt; np.array_equal([1, 2], [1, 2, 3]) False &gt;&gt;&gt; np.array_equal([1, 2], [1, 4]) False &#34;&#34;&#34; try: a1, a2 = asarray(a1), asarray(a2) except Exception: return False if a1.shape != a2.shape: return False return bool(asarray(a1 == a2).all()) File: ~/opt/anaconda3/lib/python3.7/site-packages/numpy/core/numeric.py Type: function . a = np.array(np.random.rand(512,512)) b = np.array(np.random.rand(512,512)) %time for i in range(0,20): a@b . CPU times: user 198 ms, sys: 2.68 ms, total: 200 ms Wall time: 34.8 ms . %whos . Variable Type Data/Info a ndarray 512x512: 262144 elems, type `float64`, 2097152 bytes (2.0 Mb) b ndarray 512x512: 262144 elems, type `float64`, 2097152 bytes (2.0 Mb) data dict n=4 i int 19 iris DataFrame sepal_length sepal_&lt;...&gt; 1.8 virginica matmul function &lt;function matmul at 0x1a169cc680&gt; names list n=3 np module &lt;module &#39;numpy&#39; from &#39;/Us&lt;...&gt;kages/numpy/__init__.py&#39;&gt; pd module &lt;module &#39;pandas&#39; from &#39;/U&lt;...&gt;ages/pandas/__init__.py&#39;&gt; plt module &lt;module &#39;matplotlib.pyplo&lt;...&gt;es/matplotlib/pyplot.py&#39;&gt; sns module &lt;module &#39;seaborn&#39; from &#39;/&lt;...&gt;ges/seaborn/__init__.py&#39;&gt; t ndarray 25: 25 elems, type `float64`, 200 bytes values list n=3 x int 4 . %history -l 5 . matmul(a,b) np.*array*? np.array_equal?? a = np.array(np.random.rand(512,512)) b = np.array(np.random.rand(512,512)) %time for i in range(0,20): a@b %whos . Jupyter Extensions . There are many extensions to Jupyter Notebooks. After all a jupyter notebook is just a JSON file, so you can read the JSON in and manipulate and transform things however you want! There are many features, such as variable explorers, auto code timers, and more - but I find I that most are unneccesary. About half the people I talk to don&#39;t use any, and the other half use several. . NBDEV . NBdev is a jupyter extension/python library that allows you to do full development projects in Jupyter Notebooks. There have been books and libraries written entirely in Jupyter notebooks, including testing frameworks and unit testing that goes with them. A common misconception is that Jupyter notebooks cannot be used for that, though many people already have. . . There are many features NBdev adds. Here&#39;s a few. . Using notebooks written like this, nbdev can create and run any of the following with a single command: . Searchable, hyperlinked documentation; any word you surround in backticks will by automatically hyperlinked to the appropriate documentation | Cells in jupyter notebook marked with #export will be exported automatically to a python module | Python modules, following best practices such as automatically defining all (more details) with your exported functions, classes, and variables | Pip installers (uploaded to pypi for you) | Tests (defined directly in your notebooks, and run in parallel). | Navigate and edit your code in a standard text editor or IDE, and export any changes automatically back into your notebooks | . I reccomend checking them out for more detail https://github.com/fastai/nbdev .",
            "url": "https://isaac-flath.github.io/blog/jupyter/2020/05/05/JupyterNotebooks.html",
            "relUrl": "/jupyter/2020/05/05/JupyterNotebooks.html",
            "date": " • May 5, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Geometry of Linear Equations (18.06_L1)",
            "content": "Linear Algebra . One of my goals is to understand more deeply what Neural Networks are doing. Another is to have an easier time understanding and implementing cutting edge academic papers. In order to work toward those goals, I am revisiting the Math behind Neural Networks. This time my goal is to understand intuitively every piece of the material forward and backward - rather than to pass a course on a deadline. . This blog post will be my notes about Lecture 1 from the following course: . Gilbert Strang. 18.06 Linear Algebra. Spring 2010. Massachusetts Institute of Technology: MIT OpenCourseWare, https://ocw.mit.edu. License: Creative Commons BY-NC-SA. . Goal . The goal is to solve N equations with N uknowns. We will start with 2 equations with 2 uknowns, then go to 3 equations with 3 uknowns. We will use an intuitive approach here to understand a bit about how linear equations work. . How do we multiply these together? . Matrix Multiplication (Ax=b) . $ begin{bmatrix} 2 &amp; 5 1 &amp; 3 end{bmatrix}$ $ begin{bmatrix} 1 2 end{bmatrix}$ $=1$ $ begin{bmatrix} 2 1 end{bmatrix}$ $+2$ $ begin{bmatrix} 5 3 end{bmatrix}$ $=$ $ begin{bmatrix} 12 7 end{bmatrix}$ . Ax is a linear combination of columns . 2 equations 2 uknowns . Ok, Let&#39;s look at a couple equations in a few different ways. The solution to these are any values of x and y that make both equations true. . $2x - y = 0$ . $-x + 2y = 3$ . Row Picture . We can take these 2 linear equations and plot them. . $2x - y = 0$ could be writen as $y = 2x$, which is trivial to graph. If we graph them both, we can see visually where they are both true (the intersection). . Column Picture . We can rewrite out equations into a different notation, which gives us a more concise view of what is going on. You can see that the top row is the first equation, and the bottom row is the second. Same thing, written differently. . $x$ $ begin{bmatrix} 2 -1 end{bmatrix}$ $+y$ $ begin{bmatrix} -1 2 end{bmatrix}$ $=$ $ begin{bmatrix} 0 3 end{bmatrix}$ . Graphed as Vectors . Now that we see them it in column form, we can graph the vectors . strt_pts = tensor([[0,0],[2,-1]]) end_pts = tensor([[2,-1],[1,2]]) diff = end_pts - strt_pts plt.ylim([-3, 3]) plt.xlim([-3, 3]) plt.quiver(strt_pts[:,0], strt_pts[:,1], diff[:,0], diff[:,1], angles=&#39;xy&#39;, scale_units=&#39;xy&#39;, scale=1.) plt.show() . Summed as Vectors . Now that they are represented as vectors. Let&#39;s add 1X + 2Y vectors and see that we get (0,3). Simply make one vector start where the other ends . strt_pts = tensor([[0,0],[2,-1],[1,1]]) end_pts = tensor([[2,-1],[1,1],[0,3]]) diff = end_pts - strt_pts plt.ylim([-3, 3]) plt.xlim([-3, 3]) plt.quiver(strt_pts[:,0], strt_pts[:,1], diff[:,0], diff[:,1], angles=&#39;xy&#39;, scale_units=&#39;xy&#39;, scale=1.) plt.show() . Matrix Form AX = b . We can see the same view in matrix notation. Same as the row and column view, just in a nice compressed format. . $ begin{bmatrix} 2 &amp; -1 -1 &amp; 2 end{bmatrix}$ $ begin{bmatrix} x y end{bmatrix}$ $=$ $ begin{bmatrix} 0 3 end{bmatrix}$ . Equations, 3 equations 3 uknowns . $2x - y = 0$ . $-x + 2y -z = -1$ . $-3y + 4z = 4$ . Matrix Form . $A=$ $ begin{bmatrix} 2 &amp; -1 &amp; 0 -1 &amp; 2 &amp; -1 0 &amp; -3 &amp; 4 end{bmatrix}$ $b=$ $ begin{bmatrix} 0 -1 4 end{bmatrix}$ . Row Picture . Column Picture . We can create teh column picture and graph vectors, just like in 2D space. Graphing in 3D is harder to see, but it&#39;s the same concept. . In this example we can clearly see the solution is x = 0, y = 0, z = 1. . $x$ $ begin{bmatrix} 2 -1 0 end{bmatrix}$ $+y$ $ begin{bmatrix} -1 2 4 end{bmatrix}$ $+z$ $ begin{bmatrix} 0 -1 4 end{bmatrix}$ $=$ $ begin{bmatrix} 0 -1 4 end{bmatrix}$ . Numpy Solver . Here&#39;s how you can solve the equation using Numpy. . a = np.array([[2, -1, 0], [-1, 2, -1], [0, -3, 4]]) b = np.array([0, -1, 4]) x = np.linalg.solve(a, b) print(x) . [ 0. -0. 1.] . Can I solve Ax = b for every b? . Do the linear combinations of the columns fill 3 dimensional space. . If you have some dimensionality in each direction, then you can. 3 equations with 3 uknowns can fill the 3D space as long as they don&#39;t s. . # lets expirament length_b = 20 b = np.array([list(np.random.rand(length_b)*10), list(np.random.rand(length_b)*10), list(np.random.rand(length_b)*10)]) for x in range(0,length_b): x = np.linalg.solve(a, b[:,x]) print(x) . [1.67763855 2.72747412 2.2695638 ] [7.09969632 8.37224789 6.81976514] [ 6.89371839 13.35502099 10.37470961] [4.93992439 6.06547284 4.75273683] [ 7.3809083 11.97058437 8.99081024] [5.11900468 8.2439746 8.44856071] [4.23623634 5.10209967 4.62271361] [13.38801854 20.14314952 17.14422637] [5.14643601 5.60648776 5.9971317 ] [3.22462361 4.2845177 4.80635395] [ 5.84249611 11.42063747 10.3426117 ] [4.60682698 8.70118317 8.63118543] [9.4153316 9.43774256 7.89502272] [13.53119932 19.64339519 16.56014928] [ 7.43002451 13.24529274 11.5433557 ] [10.03100649 12.7131274 11.56463466] [ 9.71428217 12.44477807 9.91446773] [15.98335818 22.67105713 19.36478084] [ 7.62890461 14.12441113 10.96336158] [3.19222775 6.09813427 6.3243463 ] .",
            "url": "https://isaac-flath.github.io/blog/linearalgebra/math/2020/05/05/.06_1_GeometryOfLinearEquations.html",
            "relUrl": "/linearalgebra/math/2020/05/05/.06_1_GeometryOfLinearEquations.html",
            "date": " • May 5, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m a Data Scientist with a passion for teaching. . I really enjoy playing with machine learning algorithms so much of my content will probably relate to that in some way :grinning: . Basically anything I find interesting and/or helpful will be included. .",
          "url": "https://isaac-flath.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://isaac-flath.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}